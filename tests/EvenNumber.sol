// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "forge-std/Test.sol";
import {ControlID, RiscZeroGroth16Verifier} from "bonsai/groth16/RiscZeroGroth16Verifier.sol";

import "../contracts/EvenNumber.sol";

contract EvenNumberTest is Test {
    RiscZeroGroth16Verifier public verifier;
    EvenNumber public evenNumber;

    function setUp() public {
        //
        // image_id must be consistent with the test vector in testSet()
        //
        bytes32 image_id = 0xa233b08506289266e2209d24fee095c44564e97eb303547c25220a7a0cd96757;

        verifier = new RiscZeroGroth16Verifier(ControlID.CONTROL_ID_0, ControlID.CONTROL_ID_1);
        evenNumber = new EvenNumber(verifier, image_id);
        assertEq(evenNumber.get(), 0);
    }

    function testSet() public {
        //
        // New test vectors can be generated by running:
        // cargo run --release -- test-vector --image-id=IMAGE_ID --number=NUMBER
        //
        uint256 number = 12345678;
        bytes memory seal = "\x03\x74\x3e\xf6\x50\x45\x41\x61\x7a\x5c\xf2\x63\x68\xcd\xc9\xb2\xab\x90\x13\x2c\x16\xe7\x78\x31\x13\x91\x20\x27\x27\xbf\xc6\x08\x0b\x95\x86\xb9\xc6\x2f\x54\x9a\x03\x20\x55\xdd\x90\xe2\x7c\x56\xc1\x04\x7a\x86\x6b\xcb\xe8\x00\x5a\x86\xc4\x2e\x22\x99\xb9\x2c\x01\xba\x8d\x82\x7c\x2d\x04\x8e\x81\x67\x37\x46\xec\xf2\x06\xf0\x16\xac\xd0\xfe\x02\xa9\x9f\x19\x2c\x04\x87\x26\x9b\x08\x08\x91\x09\xa4\x83\x08\xda\xbc\x3b\x4b\x6f\x48\xc7\xfb\x25\x45\xd4\xb4\x2a\xce\x66\x12\x6f\xcb\x07\x2f\xb4\xcd\x38\xfe\x15\x66\x7f\x16\x07\x08\xa3\xcf\x38\x29\x6d\xa1\x21\x06\xa0\x08\x62\x2b\x96\x71\x40\xe3\xa4\x63\xea\x7e\xf9\x02\xb4\xda\x78\x99\xaa\x8f\xe1\xa4\x10\x4d\xee\xc4\xa3\x9f\x10\xaf\x7f\x5a\x70\x62\xd4\xa8\xc2\x61\x3a\xb0\xb7\xcb\xbf\xd8\x73\xb6\x45\x07\xca\x16\x84\x90\xd6\x55\x0c\x72\x7b\x51\x2f\x79\x68\x22\xed\x7a\xc9\xd0\x7b\xce\xff\x99\x6d\x8f\x34\x2e\x3f\xae\x8f\x04\x53\xc8\x17\xa6\x62\xf0\xf6\x70\x07\x16\x54\xc9\x80\x91\xc1\x93\x4b\xe2\xb6\xf3\xe1\xeb\x3d\xbd\x00\xfc\x79\x13\x01\xa5\xbb\x18\x05\xc0\xde\xcd\x1e\xe4\x46\xba";
        bytes32 postStateDigest = 0x7973c5b53a9b1f176e47b0a8bb96fe762c5902c70d2dfa29ab349f7e7d01cd15;

        evenNumber.set(number, seal, postStateDigest);
        assertEq(evenNumber.get(), number);
    }
}