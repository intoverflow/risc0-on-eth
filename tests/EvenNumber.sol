// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "forge-std/Test.sol";
import {ControlID, RiscZeroGroth16Verifier} from "bonsai/groth16/RiscZeroGroth16Verifier.sol";

import "../contracts/EvenNumber.sol";

contract EvenNumberTest is Test {
    RiscZeroGroth16Verifier public verifier;
    EvenNumber public evenNumber;

    function setUp() public {
        //
        // image_id must be consistent with the test vector in testSet()
        //
        bytes32 image_id = 0xb5738a9099282bf37dc46cac14865b81dd9dd230467b6c50a78e668458b886b5;

        verifier = new RiscZeroGroth16Verifier(ControlID.CONTROL_ID_0, ControlID.CONTROL_ID_1);
        evenNumber = new EvenNumber(verifier, image_id);
        assertEq(evenNumber.get(), 0);
    }

    function testSet() public {
        //
        // New test vectors can be generated by running:
        // cargo run --release -- test-vector --image-id=IMAGE_ID --number=NUMBER
        //
        uint256 number = 12345678;
        bytes memory seal = "\x05\x7a\xa7\xad\xc0\xc9\x83\x81\xfe\xc4\xc9\x56\x72\xa9\xf2\x52\x3a\x7e\x95\xce\x3b\xd2\xe6\x2a\x6e\xa8\x1a\x26\x22\x9b\x6b\x30\x14\x9f\x55\xcf\x3d\x27\x3f\x8d\x54\x52\x18\xbc\xe5\xb7\x81\x19\x86\x4d\x7a\x97\x61\xc7\x72\xd7\xdd\xc4\x7b\x7f\x5e\x46\xc3\x58\x25\xbe\xa3\xb0\x2d\x90\xcc\x98\xb7\xba\x07\xcf\x64\xe7\x20\xbc\x85\x6d\x02\xe8\x91\x52\xe2\x6f\x32\x5d\xec\x63\xab\x35\xd2\x6d\x00\xa2\xba\x6a\xb4\x8d\x06\x74\x98\xb5\xb3\x96\xbe\xa4\xae\x32\xfc\xf1\x4e\x9f\x0a\x76\xef\xe5\xe8\x5c\x87\xd6\x92\x37\xad\xff\x1e\x97\xa1\x6a\x4f\xb9\x77\x2e\xa3\xc3\x60\x58\x9c\xc4\xb6\xcd\xf5\x2c\x8e\xff\x6b\x5a\x8e\xe2\xc4\xa1\x08\x54\x2e\x04\x3a\x86\x1b\x45\x70\x37\x23\x20\xdc\xba\x69\x60\x94\xac\xea\x89\x84\x69\x86\x39\xbd\xb7\x51\x7a\x4f\xe8\xbe\xaf\x04\x2d\xa5\x90\x98\xa5\x0f\x79\x85\xd4\xa1\x4c\xb2\x3f\xda\x68\xc1\x39\xe0\x86\x40\xe4\x16\xe0\x01\x35\x2c\xd4\x95\x5d\xeb\x9c\xcb\x44\x63\xb4\x47\xc3\x21\xeb\xc1\x9a\xac\x6e\xbe\xa3\x9e\xc2\xc1\xc5\x7e\x36\xa9\xc4\x8a\x48\x40\xa0\xb3\xa9\xbd\x6a\x76\x22\xcf\x3c\x37\xfc\xa9\x78";
        bytes32 postStateDigest = 0x8f5c109aa075680d1ba18d3ba5502cfb2682e1781ecc7b278bff7578b619193e;

        evenNumber.set(number, seal, postStateDigest);
        assertEq(evenNumber.get(), number);
    }
}